---
title: "Bus Speed"
format: html
---

Overall questions:
- Big picture: How much time does an average rider waste waiting? - Pie chart (interactive)
- From the people that wait the most – what borough are they waiting in 
- Tie it to speed and bus mileage — is there a bus going slower than average that is causing the delays 



```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                                                            --
##----------------------------- LOAD IN LIBRARIES-------------------------------
##                                                                            --
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

library(tidyverse) #a bunch of necessary packages in one
library(dplyr) #helps with piping
library(ggplot2) #creates graphs
library(ARTofR) #creates clean heading for code
library(extrafont)
library(showtext)

#load fonts
font_import()  # This can take some time
loadfonts(device = "win")  # Use "pdf" or "postscript" if you're not on Windows


sysfonts::font_families_google()

font_add_google("Libre Baskerville", family = "Libre")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                                                            --
##----------------------------------- DATA--------------------------------------
##                                                                            --
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#load in data
bus_speed <- read_csv("data/MTA_Bus_Speeds__2015-2019_20241008.csv")

#view data
View(bus_speed)
```


```{r}
#find average speed per borough (overall speed)
bus_avg <- bus_speed %>% 
  group_by(borough) %>% 
  summarise(mean_speed = mean(average_speed))

View(bus_avg)
```

```{r}
#create a bar chart showing the average speeds in each borough
ggplot(data = bus_avg, 
       aes(x = borough, 
           y = mean_speed)) + 
  geom_col(fill = c("red", "orange", "yellow", "green", "blue", "purple")) +
  labs(title = "Average bus speeds in each borough from 2014 to 2019",
       x = "Borough",
       y = "Speed (mph)") +
  theme_minimal()
```

---------------------------------------------------

## What borough are riders usually waiting in

- want to create 4 pie chart graphs:
  - on peak, express
  - off peak, express
  - on peak, local
  - off peak, local
  
```{r}
#load in data, cust_wait is the customer journey focused dataset
cust_wait <- read_csv("data/MTA_Bus_Customer_Journey-Focused_Metrics__2017-2019_20241008.csv")

#view the dataset
View(cust_wait)
```

```{r}
#rename additional_bus_stop_time column to wait_time
waiting_data <- cust_wait %>% 
  rename(wait_time = additional_bus_stop_time)

#view the dataset
View(waiting_data)

#filter data for trip type that equals EXP and LCL/LTD (gives me monthly data)
waiting_data <- waiting_data %>% 
  filter(trip_type == 'EXP'| trip_type == 'LCL/LTD')
```


```{r}
colors <- c("Staten Island" = "#afc2a9",
            "Queens" = "#92e1fb",
            "Manhattan" = "#ff4500",
            "Brooklyn" = "#4169e1",
            "Bronx" = "#eda862"
            )



#find how many bus routes per borough
bus_route_borough <- waiting_data %>%  #piping from waiting data
 # filter(trip_type == 'EXP' & period == 'Peak') %>% #filter for trip types that equal exp and peak
  unique() %>% #make sure to find the unique of each row (do not double count them)
  group_by(borough) %>% #group by borough
  summarise(Amount = n()) %>%  #count the amount of observations per borough
  mutate(percent = round(Amount/sum(Amount)*100, 1),
         percent_sym = round(Amount/sum(Amount)*100, 1))

bus_route_borough <- bus_route_borough %>% 
  arrange(desc(borough)) %>%
  mutate(prop = percent / sum(bus_route_borough$percent) *100) %>%
  mutate(ypos = cumsum(prop)- 0.5*prop )


#add % symbol to the end of the percent column obervations
bus_route_borough[ ,4] <- paste0(as.matrix(bus_route_borough[, 4]), '%')


borough <- ggplot(data = bus_route_borough, aes(x = "", y = percent, fill = borough))+
  geom_col(stat="identity", width = 1, col = "black", fill = colors) +
  coord_polar(theta = "y") +
  theme_void() +
  # geom_text(aes(x = 1.1, y = ypos, label = percent_sym), size = 18, family = "Libre", face = "bold") +
   geom_label(aes(x = 1.78, y = ypos, label = borough), fill = colors, size = 14, family = "Libre") +
  theme(
    text=element_text(size=70, "bold", family="Libre")
  )

ggsave(filename = 'borough.png', plot = borough, height = 7.5, width = 6)

#find how many people waiting per borough
bus_route_person <- waiting_data %>%  #piping from waiting data
  unique() %>% #make sure to find the unique of each row (do not double count them)
  group_by(borough) %>% #group by borough
  summarise(Amount = sum(number_of_customers)) %>%  #count the amount of observations per borough
  mutate(percent = round(Amount/sum(Amount)*100, 1),
         percent_sym = round(Amount/sum(Amount)*100, 1))

#find the position of the numbers to appear on the pie chart
bus_route_person <- bus_route_person %>% 
  arrange(desc(borough)) %>%
  mutate(prop = percent / sum(bus_route_person$percent) *100) %>%
  mutate(ypos = cumsum(prop)- 0.5*prop )


#add % symbol to the end of the percent column obervations
bus_route_person[ ,4] <- paste0(as.matrix(bus_route_person[, 4]), '%')


people <- ggplot(data = bus_route_person, aes(x = "", y = percent, fill = borough))+
  geom_col(stat="identity", width = 1, col = "black", fill = colors) +
  coord_polar(theta = "y") +
  theme_void() +
  # geom_text(aes(x = 1.1, y = ypos, label = percent_sym), nudge_x = 0.12, size = 18, family = "Libre", face = "bold") +
   geom_label(aes(x = 1.78, y = ypos, label = borough), fill = colors, size = 14, family = "Libre", face = "bold") +
  theme(
    text=element_text(size=50, "bold", family="Libre",)
  )

ggsave(filename = 'people.png', plot = people, height = 9, width = 7)

#borough colors:
# Manhattan: #80bdf6
# Brooklyn: #fbf7f4
# Bronx: #ffbe7d
# Queens: #92e1fb
# Staten Island: #d9ead3



```


```{r}
bus_route_person_total <- cust_wait %>%  #piping from waiting data
  unique() %>% #make sure to find the unique of each row (do not double count them)
  summarise(Amount = sum(number_of_customers)) #%>%  #count the amount of observations per borough
  mutate(percent = round(Amount/sum(Amount)*100, 1),
         percent_sym = round(Amount/sum(Amount)*100, 1))

sum(waiting_data$number_of_customers)



#filter the data to only show off peak, express route in dataset  
off_peak_exp <- waiting_data %>% 
  filter(trip_type == 'EXP' & period == 'Off-Peak') %>% 
  unique() %>% 
  group_by(borough) %>% 
  summarise(Amount = n())
  
#filter the data to only show on peak, local route in dataset  
on_peak_LCL <- waiting_data %>% 
  filter(trip_type == 'LCL/LTD' & period == 'Peak') %>% 
  unique() %>% 
  group_by(borough) %>% 
  summarise(Amount = n())
  
#filter the data to only show off peak, local route in dataset  
off_peak_LCL <- waiting_data %>% 
  filter(trip_type == 'LCL/LTD' & period == 'Peak') %>% 
  unique() %>% 
  group_by(borough) %>% 
  summarise(Amount = n())
  
#view dataset
View(on_peak_exp)

#create pie chart for express on peak
ggplot(data = on_peak_exp_2, aes(x = "", y = percent, fill = borough))+
  geom_col(stat="identity", width = 1, col = "white") +
  coord_polar(theta = "y") +
  theme_void() +
  labs(title = "Bus line amount per Borough for On Peak, Express") +
  geom_text(aes(y = ypos, label = percent_sym))

#create pie chart for express off peak
ggplot(data = off_peak_exp, aes(x = "x", y = Amount, fill = borough))+
  geom_bar(stat="identity", width = 1) +
  coord_polar(theta = "y")

#create pie chart for local on peak
ggplot(data = on_peak_LCL, aes(x = "x", y = Amount, fill = borough))+
  geom_bar(stat="identity", width = 1) +
  coord_polar(theta = "y")

#create pie chart for 
ggplot(data = off_peak_LCL, aes(x = "x", y = Amount, fill = borough))+
  geom_bar(stat="identity", width = 1) +
  coord_polar(theta = "y")
  
  
```



--------------------------------------
## Do riders get to their destination on time?
- look at overall number from 2017 to 2019
- look at per year
- look at per borough
- difference between peak and off peak?
(We are still looking at exp and local since that is what the other visualizations are focusing on)

```{r}
#.........................filtering data.........................

#filter for exp and local trip type
waiting_data_2 <- cust_wait %>% 
  filter(trip_type == 'EXP'| trip_type == 'LCL/LTD')


#........................Overall on time.........................

#find the average percentage of how many people make it to their destination within 5 minutes
on_time <- cust_wait %>% 
  summarise(mean_amount = mean(customer_journey_time_performance))
print(on_time)
# if we want to add this information, we can do a progress bar type of deal with one part being people arrived on time and the other part being people do not get to their destination on time

#........................Yearly on time.........................

#find the average percentage per year------------------
on_time_yearly <- waiting_data_2 %>% 
  mutate(Year = year(month)) %>% 
  group_by(Year) %>% 
  summarise(mean_amount = mean(customer_journey_time_performance))

#create a visualization to accompany this per year------------
#line plot
yearly_line <- ggplot(data = on_time_yearly, aes(x = Year, y = mean_amount)) +
  geom_line() +
  theme_minimal()
print(yearly_line)

#bar graph
yearly_col <- ggplot(data = on_time_yearly, aes(x = Year, y = mean_amount)) +
  geom_col() +
  theme_minimal()
print(yearly_col)


#........................Borough on time.........................

#look at per borough
on_time_borough <- waiting_data_2 %>% 
  group_by(borough) %>% 
  summarise(mean_amount = mean(customer_journey_time_performance))

#create a visualization to accompany this per borough------------
#line plot
# borough_line <- ggplot(data = on_time_borough, aes(x = borough, y = mean_amount)) +
#   geom_line() +
#   theme_minimal()
# print(borough_line)

#bar graph
borough_col <- ggplot(data = on_time_borough, aes(x = borough, y = mean_amount)) +
  geom_col() +
  theme_minimal()
print(borough_col)


#........................Peak vs Off Peak on time.........................

#look at on vs off peak
on_time_peak <- waiting_data_2 %>% 
  group_by(period) %>% 
  summarise(mean_amount = mean(customer_journey_time_performance))

#create a visualization to accompany this per borough------------
on_time_peak_2 <- on_time_peak %>% 
  arrange(desc(period)) %>%
  mutate(prop = mean_amount / sum(on_time_peak$mean_amount) *100) %>%
  mutate(ypos = cumsum(prop)- 0.15*prop )

#pie plot
ggplot(on_time_peak_2, aes(x="", y= mean_amount, fill=period)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  geom_text(aes(y = ypos, label = period), color = "white", size=6)

pie(on_time_peak$mean_amount, labels = on_time_peak$period)

# peak_line <- ggplot(data = on_time_peak, aes(x = period, y = mean_amount)) +
#   geom_line() +
#   theme_minimal()
# print(peak_line)

#bar graph
peak_col <- ggplot(data = on_time_peak, aes(x = period, y = mean_amount)) +
  geom_col() +
  theme_minimal()
print(peak_col)
```












